@using Microsoft.AspNetCore.Components.Authorization

@implements IDisposable
<MudMenu Class="ml-1" PositionAtCursor="false" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.BottomLeft">
    <ActivatorContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            @if (string.IsNullOrEmpty(userModel?.Avatar))
            {
                <MudAvatar Size="Size.Medium" Square="true">@userModel?.Username?.FirstOrDefault()</MudAvatar>
            }
            else
            {
                <MudAvatar Size="Size.Medium" Square="true">
                    <MudImage Src="@GetAvatarUrl()"></MudImage>
                </MudAvatar>
            }
            <MudStack Justify="Justify.Center" Spacing="0">
                <MudText Typo="Typo.body2">@userModel?.Username</MudText>
                <MudText Typo="Typo.body2" Class="mud-text-secondary">@userModel?.Email</MudText>
            </MudStack>
        </MudStack>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Href="/account/profile">
            <div class="d-flex align-center">
                <MudIcon Class="mr-1" Size="Size.Small"
                Icon="@Icons.Material.Filled.Person" />
                <MudText Align="Align.Center">@L["Profile"]</MudText>
            </div>
        </MudMenuItem>
        <MudMenuItem Href="/profile/setting">
            <div class="d-flex align-center">
                <MudIcon Class="mr-1" Size="Size.Small"
                Icon="@Icons.Material.Filled.Settings" />
                <MudText Align="Align.Center">@L["Settings"]</MudText>
            </div>
        </MudMenuItem>
        <MudMenuItem OnClick="OnSignOut">
            <div class="d-flex align-center">
                <MudIcon Class="mr-1" Size="Size.Small"
                Icon="@Icons.Material.Filled.Logout" />
                <MudText Align="Align.Center">@L["Logout"]</MudText>
            </div>
        </MudMenuItem>

    </ChildContent>
</MudMenu>


@code {
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    private UserInfo? userModel { get; set; } = new();
    private string? GetAvatarUrl() => userModel?.Avatar;

    protected override async Task OnInitializedAsync()
    {
        

    }
    
    private void OnSignOut()
    {
       
    }
    public void Dispose()
    {
        
    }
}
